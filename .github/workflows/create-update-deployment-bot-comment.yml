---
name: Create or update deployment bot comment

on:
  workflow_call:
    secrets:
      DEPLOYMENT_BOT_APP_ID:
        required: true
      DEPLOYMENT_BOT_PRIVATE_KEY:
        required: true
    inputs:
      repository_owner:
        description: GitHub repo owner
        default: resim-ai
        required: false
        type: string
      repository:
        description: Repo where the PR or Issue lives
        required: true
        type: string
      pr_number:
        description: Pull request number. Pass through 'github.event.pull_request.number'
        required: true
        type: string
      ref_name:
        description: Pass through 'github.ref_name'. This is used as a hidden anchor in the comment so we can find it later and update it.
        required: true
        type: string
      comment_key:
        description: Unique key to be combined with the 'ref_name' so we can identify the comment. E.g., if you're using this in a terraform flow, 'tf-', or if it's e2e tests, 'e2e-'. It doesn't need to be human readable as it's hidden and only used in the workflow code. There is a default set, but if you use this in multiple workflows on a PR, you need to set at least one.
        default: comment-
        required: false
        type: string
      comment_body:
        description: The message you want be displayed in the PR comment. This can be a multiline string with MD formatting.
        default: This PR will be tested and the results posted here.
        required: false
        type: string

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deployment_bot_comment:
    name: Deployment Bot Comment
    runs-on: ubuntu-latest
    outputs:
      comment: ${{ steps.comment.outputs.result }}
    steps:
      - name: Generate Deployment Bot token
        uses: actions/create-github-app-token@v1
        id: get_token
        with:
          app-id: ${{ secrets.DEPLOYMENT_BOT_APP_ID }}
          private-key: ${{ secrets.DEPLOYMENT_BOT_PRIVATE_KEY }}
          owner: ${{ inputs.repository_owner }}
          repositories: ${{ inputs.repository}}
      - name: Comment on PR
        uses: actions/github-script@v7
        id: comment
        with:
          github-token: ${{ steps.get_token.outputs.token }}
          result-encoding: string
          script: |
            const commentRef = '${{ inputs.comment_key }}${{ inputs.ref_name }}'
            const body = `${{ inputs.comment_body }}\n<!--  ${commentRef} -->`

            // Check for an existing comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: '${{ inputs.pr_number }}',
              owner: '${{ inputs.repository_owner }}',
              repo: '${{ inputs.repository}}'
            });

            const foundComment = comments.find(comment => comment.body.includes(commentRef));

            if (foundComment) {
              console.log(`Found existing comment, reusing.`);
              github.rest.issues.updateComment({
                comment_id: foundComment.id,
                owner: '${{ inputs.repository_owner }}',
                repo: '${{ inputs.repository}}',
                body: body
            })
              return foundComment.id;
            } else {
              console.log(`Cannot find existing comment, creating a new one.`);
              const response = await github.rest.issues.createComment({
                issue_number: '${{ inputs.pr_number }}',
                owner: '${{ inputs.repository_owner }}',
                repo: '${{ inputs.repository}}',
                body: body
              });
              return response.data.id;
            }
    continue-on-error: true
