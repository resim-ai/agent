---
name: Integration tests
run-name: "ReRun PR #${{ inputs.environment }} - agent integration tests"

on:  #trunk-ignore(yamllint/truthy)
  workflow_call:
    secrets:
      DEPLOYMENT_BOT_APP_ID:
        required: true
      DEPLOYMENT_BOT_PRIVATE_KEY:
        required: true
      agent_password:
        required: true
      AGENT_TEST_PASSWORD:
        required: true
    inputs:
      environment:
        description: Environment name. PR ref for agent repo e.g. 'pr-22', dev env for rerun, e.g. 'dev-env-pr-4444'
        required: true
        type: string
      ref_name:
        description: Ref for checks
        required: true
        type: string
      pr:
        description: Pass through github.event.pull_request.number
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: Environment name. PR ref for agent repo e.g. 'pr-22', dev env for rerun, e.g. 'dev-env-pr-4444'
        required: true
        type: string
      ref_name:
        description: Ref for checks
        required: true
        type: string
      pr:
        description: Pass through github.event.pull_request.number
        type: string

permissions:
  id-token: write
  contents: write
  checks: write
  pull-requests: write

jobs:
  start_instance:
    name: Start test environment
    runs-on: ubuntu-latest
    env:
      TF_VAR_agent_password: "${{ secrets.agent_password }}"
      TF_VAR_environment: "${{ inputs.environment }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate Deployment Bot token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DEPLOYMENT_BOT_APP_ID }}
          private-key: ${{ secrets.DEPLOYMENT_BOT_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: agent

      - name: Configure AWS Credentials - rerun_dev
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::840213157818:role/actions-agent
          aws-region: us-east-1

      - name: Setup AWS Profile - rerun_dev
        run: |
          aws configure set region us-east-1 --profile rerun_dev
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile rerun_dev
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile rerun_dev
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile rerun_dev
          aws configure list --profile rerun_dev
          aws sts get-caller-identity --profile rerun_dev

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.1

      - name: Terraform Format Check
        working-directory: test/integration
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        working-directory: test/integration
        id: init
        run: |
          aws sts get-caller-identity --profile rerun_dev
          git config --global url."https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com".insteadOf ssh://git@github.com
          terraform init -upgrade

      - name: Terraform Workspace New
        working-directory: test/integration
        id: workspace-new
        run: terraform workspace new "${{ inputs.environment }}"
        continue-on-error: true

      # workspace new switches to the new workspace but we want to select it and fail if we can't for whatever reason
      - name: Terraform Workspace Select
        working-directory: test/integration
        id: workspace-select
        run: terraform workspace select "${{ inputs.environment }}"

      - name: Terraform Validate
        working-directory: test/integration
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        working-directory: test/integration
        run: terraform apply -auto-approve -input=false

  build_test_image:
    name: Build test image
    runs-on: ubuntu-latest
    env:
      registry: 909785973729.dkr.ecr.us-east-1.amazonaws.com
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials us-east-1
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::909785973729:role/actions-agent
          aws-region: us-east-1

      - name: Login to ECR us-east-1
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.registry }}/agent-test
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=${{ inputs.environment }}

      - name: Docker Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./test/integration
          file: ./test/integration/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test:
    name: Run test
    runs-on: ubuntu-latest
    needs: [start_instance, build_test_image]
    outputs:
      test_outcome: ${{ steps.test.outcome }}
      test_report: ${{ steps.test-output.outputs.TEST_OUTPUT }}
      REPO: ${{ steps.params.outputs.REPO }}
      API_HOST: ${{ steps.params.outputs.API_HOST }}
    steps:
      - name: Generate Deployment Bot token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DEPLOYMENT_BOT_APP_ID }}
          private-key: ${{ secrets.DEPLOYMENT_BOT_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: agent,rerun

      - name: Determine environment parameters
        id: params
        env:
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          if [[ "$ENVIRONMENT" == dev* ]]; then
            echo "REPO=rerun" >> "$GITHUB_OUTPUT"
            echo "API_HOST=$ENVIRONMENT.api.dev.resim.io" >> "$GITHUB_OUTPUT"
          elif [[ "$ENVIRONMENT" == staging ]]; then
            echo "REPO=rerun" >> "$GITHUB_OUTPUT"
            echo "API_HOST=api.resim.io" >> "$GITHUB_OUTPUT"
          else
            echo "REPO=agent" >> "$GITHUB_OUTPUT"
            echo "API_HOST=api.resim.io" >> "$GITHUB_OUTPUT"
          fi

      - name: Register Check In Progress
        id: check-in-progress
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          result-encoding: string
          script: |
            const response = await github.rest.checks.create({
              owner: 'resim-ai',
              repo: '${{ steps.params.outputs.REPO }}',
              name: 'Agent Integration Test',
              head_sha: '${{ inputs.ref_name }}',
              status: 'in_progress',
            })
            return response.data.id

      - name: Configure AWS Credentials - rerun_dev
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::840213157818:role/actions-agent
          aws-region: us-east-1

      - name: Setup AWS Profile - rerun_dev
        run: |
          aws configure set region us-east-1 --profile rerun_dev
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --profile rerun_dev
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --profile rerun_dev
          aws configure set aws_session_token ${{ env.AWS_SESSION_TOKEN }} --profile rerun_dev
          aws configure list --profile rerun_dev
          aws sts get-caller-identity --profile rerun_dev

      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum

      - name: Build test
        run: |
          go get
          go build ./test/integration

      - name: Run Integration Test Suite
        id: test
        run: go test -v ./test/integration >> test.out
        env:
          AWS_PROFILE: rerun_dev
          AWS_REGION: us-east-1
          AGENT_TEST_NAME: ci-integration-test-${{ inputs.environment }}
          AGENT_TEST_POOL_LABELS: agent-test-${{ inputs.environment }}
          AGENT_TEST_API_HOST: https://${{ steps.params.outputs.API_HOST }}/v1/
          AGENT_TEST_USERNAME: cli+e2e.resim.ai@resim.ai
          AGENT_TEST_AUTH_HOST: https://resim-dev.us.auth0.com
          AGENT_TEST_EXPERIENCE_BUCKET: resim-agent-test-${{ inputs.environment }}
          AGENT_TEST_PASSWORD: ${{ secrets.AGENT_TEST_PASSWORD }}
          AGENT_TEST_LOCAL_IMAGE: 909785973729.dkr.ecr.us-east-1.amazonaws.com/agent-test:${{ inputs.environment }}
        continue-on-error: true

      - name: Get Test Output
        id: test-output
        if: always()
        run: |
          {
            echo 'TEST_OUTPUT<<EOF'
            awk 1 ORS='\n' < test.out
            echo EOF
          } > "$GITHUB_OUTPUT"

      - name: Register Check Outcome
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            github.rest.checks.update({
              owner: 'resim-ai',
              repo: '${{ steps.params.outputs.REPO }}',
              name: 'Agent Integration Test',
              check_run_id: ${{ steps.check-in-progress.outputs.result }},
              status: 'completed',
              conclusion: '${{ steps.test.outcome }}',
            })

  deployment_bot_comment_test:
    name: Deployment Bot Comment - Test Complete
    if: ${{ startsWith(inputs.environment, 'dev' )}}
    needs: [test]
    uses: resim-ai/workflows/.github/workflows/create-update-deployment-bot-comment.yml@v2
    with:
      repository: ${{ needs.test.outputs.REPO }}
      pr_number: ${{ inputs.pr }}
      ref_name: ${{ github.ref_name }}
      comment_key: deploy-
      comment_body: |
        # Integration test

        ## Result 🧪 ${{ needs.test.outputs.test_outcome }}

        <details><summary>Show Details</summary>

        \`\`\`\n
        ${{ needs.test.outputs.test_report }}
        \`\`\`

        </details>

    secrets:
      DEPLOYMENT_BOT_APP_ID: ${{ secrets.DEPLOYMENT_BOT_APP_ID }}
      DEPLOYMENT_BOT_PRIVATE_KEY: ${{ secrets.DEPLOYMENT_BOT_PRIVATE_KEY }}

